"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var invariant_1 = __importDefault(require("invariant"));
var hoist_non_react_statics_1 = __importDefault(require("hoist-non-react-statics"));
var DndContext_1 = require("../common/DndContext");
var utils_1 = require("./utils");
/**
 * @deprecated Use DnDProvider in your JSX tree instead. This will be removed in a future major version.
 *
 * Wrap the root component of your application with DragDropContext decorator to set up React DnD.
 * This lets you specify the backend, and sets up the shared DnD state behind the scenes.
 * @param backendFactory The DnD backend factory
 * @param backendContext The backend context
 */
function DragDropContext(backendFactory, backendContext, debugMode) {
    utils_1.checkDecoratorArguments('DragDropContext', 'backend', backendFactory);
    var childContext = DndContext_1.createDndContext(backendFactory, backendContext, debugMode);
    return function decorateContext(DecoratedComponent) {
        var Decorated = DecoratedComponent;
        var displayName = Decorated.displayName || Decorated.name || 'Component';
        var DragDropContextContainer = /** @class */ (function (_super) {
            __extends(DragDropContextContainer, _super);
            function DragDropContextContainer(props, context) {
                var _this = _super.call(this, props, context) || this;
                _this.ref = React.createRef();
                _this.getManager = function () { return childContext.dragDropManager; };
                // eslint-disable-next-line no-console
                console.warn("DragDropContext has been deprecated and will be removed in a future version. Please use DndProvider instead.");
                return _this;
            }
            DragDropContextContainer.prototype.getDecoratedComponentInstance = function () {
                invariant_1.default(this.ref.current, 'In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()');
                return this.ref.current;
            };
            DragDropContextContainer.prototype.render = function () {
                return (React.createElement(DndContext_1.DndContext.Provider, { value: childContext },
                    React.createElement(Decorated, __assign({}, this.props, { ref: utils_1.isRefable(Decorated) ? this.ref : null }))));
            };
            DragDropContextContainer.DecoratedComponent = DecoratedComponent;
            DragDropContextContainer.displayName = "DragDropContext(" + displayName + ")";
            return DragDropContextContainer;
        }(React.Component));
        return hoist_non_react_statics_1.default(DragDropContextContainer, DecoratedComponent);
    };
}
exports.DragDropContext = DragDropContext;
